#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
import tf2_ros
from geometry_msgs.msg import TransformStamped
from nav_msgs.msg import Odometry
from rclpy.time import Time
import csv
import os

class PoseLoggerNode(Node):
    def __init__(self):
        super().__init__('pose_logger_node')
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        self.gt_pose = None
        self.sub = self.create_subscription(Odometry, '/gt_odom', self.gt_callback, 1)
        self.timer = self.create_timer(5.0, self.timer_callback)

        self.output_file = os.path.join(os.getcwd(), 'pose_log.csv')
        self.write_header()

    def write_header(self):
        if not os.path.exists(self.output_file):
            with open(self.output_file, mode='w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow([
                    'timestamp_sec',
                    'slam_x', 'slam_y',
                    'gt_x', 'gt_y'
                ])

    def gt_callback(self, msg):
        self.gt_pose = msg.pose.pose

    def timer_callback(self):
        if self.gt_pose is None:
            return
        try:
            tf: TransformStamped = self.tf_buffer.lookup_transform(
                'map', 'base_footprint', Time())

            slam_x = tf.transform.translation.x
            slam_y = tf.transform.translation.y

            gt_x = self.gt_pose.position.x
            gt_y = self.gt_pose.position.y

            timestamp = self.get_clock().now().nanoseconds / 1e9

            with open(self.output_file, mode='a', newline='') as f:
                writer = csv.writer(f)
                writer.writerow([f"{timestamp:.2f}", slam_x, slam_y, gt_x, gt_y])

            self.get_logger().info(f"[{timestamp:.2f}s] Sampled poses: {slam_x:.2f}, {slam_y:.2f} | {gt_x:.2f}, {gt_y:.2f}")
        except Exception as e:
            self.get_logger().warn(f"TF lookup failed: {e}")

def main():
    rclpy.init()
    node = PoseLoggerNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Ctrl+C pressed, shutting down.")
        node.destroy_node()
    finally:
        rclpy.shutdown()
if __name__ == '__main__':
    main()
