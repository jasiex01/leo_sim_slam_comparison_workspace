#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rtabmap_msgs.msg import Info
from std_msgs.msg import Float64
from rclpy.time import Time
import csv
import os

class RtabmapProcessingLogger(Node):
    def __init__(self):
        super().__init__('processing_time_logger')
        self.subscription = self.create_subscription(
            Info,
            '/info',
            self.info_callback,
            1)
        self.gmapping_subscription = self.create_subscription(
            Float64,
            '/processing_time',
            self.gmapping_callback,
            1)
        
        # CSV file setup
        #self.csv_file_path = os.path.join(os.path.expanduser('~'), 'rtabmap_processing_log.csv')
        #self.csv_file = open(self.csv_file_path, mode='w', newline='')
        #self.csv_writer = csv.writer(self.csv_file)
        #self.csv_writer.writerow(['ros_time_sec', 'processing_time_ms'])
        #self.get_logger().info(f"Logging to {self.csv_file_path}")

    def info_callback(self, msg: Info):
        key = 'RtabmapROS/TimeTotal/ms'
        if key in msg.stats_keys:
            index = msg.stats_keys.index(key)
            if index < len(msg.stats_values):
                processing_time = msg.stats_values[index]
                ros_time = self.get_clock().now().to_msg()
                ros_time_sec = ros_time.sec + ros_time.nanosec * 1e-9
                #self.csv_writer.writerow([ros_time_sec, processing_time])
                self.get_logger().info(f"Logged: time={ros_time_sec:.3f}, processing={processing_time:.2f} ms")

    def gmapping_callback(self, msg: Float64):
        ros_time = self.get_clock().now().to_msg()
        ros_time_sec = ros_time.sec + ros_time.nanosec * 1e-9
        # self.csv_writer.writerow([ros_time_sec, '', msg.data])
        self.get_logger().info(f"Logged: time={ros_time_sec:.3f}s, processing={msg.data:.2f} ms")


    def destroy_node(self):
        #self.csv_file.close()
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = RtabmapProcessingLogger()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Shutting down...")
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
