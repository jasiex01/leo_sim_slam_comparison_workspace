#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from geometry_msgs.msg import PoseArray, Pose, TwistWithCovariance
from nav_msgs.msg import Odometry
from std_msgs.msg import Header
from geometry_msgs.msg import TransformStamped
import tf2_ros

class PoseArrayToOdom(Node):
    def __init__(self):
        super().__init__('posearray_to_odom')

        # Parameters
        self.declare_parameter('input_topic', '/world/leo_empty/dynamic_pose/info')
        self.declare_parameter('output_topic', '/gt_odom')
        self.declare_parameter('frame_id', 'odom')
        self.declare_parameter('child_frame_id', 'base_footprint')

        input_topic = self.get_parameter('input_topic').get_parameter_value().string_value
        output_topic = self.get_parameter('output_topic').get_parameter_value().string_value

        self.frame_id = self.get_parameter('frame_id').get_parameter_value().string_value
        self.child_frame_id = self.get_parameter('child_frame_id').get_parameter_value().string_value

        # Sub & Pub
        self.subscription = self.create_subscription(PoseArray, input_topic, self.callback, 1)
        self.publisher = self.create_publisher(Odometry, output_topic, 1)

        # TF Broadcaster
        #self.tf_broadcaster = tf2_ros.TransformBroadcaster(self)

        self.get_logger().info(f"Listening to: {input_topic}, publishing to: {output_topic} and broadcasting tf from {self.frame_id} to {self.child_frame_id}")

    def callback(self, msg: PoseArray):
        if len(msg.poses) == 0:
            self.get_logger().warn("Received PoseArray with no poses.")
            return

        pose: Pose = msg.poses[0]

        # Create and publish Odometry message
        odom_msg = Odometry()
        odom_msg.header = Header()
        odom_msg.header.stamp = msg.header.stamp
        odom_msg.header.frame_id = self.frame_id
        odom_msg.child_frame_id = self.child_frame_id

        odom_msg.pose.pose = pose
        odom_msg.twist = TwistWithCovariance()

        self.publisher.publish(odom_msg)

        # Create and publish TF transform
        #tf_msg = TransformStamped()
        #tf_msg.header.stamp = msg.header.stamp
        #tf_msg.header.frame_id = self.frame_id
        #tf_msg.child_frame_id = self.child_frame_id
        #tf_msg.transform.translation.x = pose.position.x
        #tf_msg.transform.translation.y = pose.position.y
        #tf_msg.transform.translation.z = pose.position.z
        #tf_msg.transform.rotation = pose.orientation

        #self.tf_broadcaster.sendTransform(tf_msg)

def main(args=None):
    rclpy.init(args=args)
    node = PoseArrayToOdom()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Ctrl + C pressed, shutting down.")
        node.destroy_node()
    finally:
        rclpy.shutdown()

if __name__ == '__main__':
    main()
